version: '3.5'


# The services are listed in this order
# DataBases
# Kafka
# Spark
# Python

services:

  # DATABASES

  stock_input_mongo:
    image: mongo
    container_name: stock_input_mongo
    expose:
      - 27017
    environment:
      - MONGO_INITDB_DATABASE=twitter_sources
    env_file:
      - ./env_files/.env-mongo-input
    volumes:
      - mongo_input_volume:/data/db
    networks:
      - input_network
    restart: unless-stopped

  stock_output_mongo:
    image: mongo
    container_name: stock_output_mongo
    expose:
      - 27017
    environment:
      - MONGO_INITDB_DATABASE=text_databases
    env_file:
      - ./env_files/.env-mongo-output
    volumes:
      - mongo_output_volume:/data/db
    networks:
      - input_network
      - output_network
    restart: unless-stopped

  stock_input_postgres:
    image: postgres
    container_name: stock_input_postgres
    expose:
      - 5432
    environment:
      PGDATA: /data/postgres
    env_file:
      - ./env_files/.env-postgres-input
    volumes:
      - postgres_stock_input:/data/postgres
    networks:
      - input_network
    restart: unless-stopped

  stock_output_postgres:
    image: postgres
    container_name: stock_output_postgres
    expose:
      - 5432
    environment:
      PGDATA: /data/postgres
    env_file:
      - ./env_files/.env-postgres-output
    volumes:
      - postgres_stock_output:/data/postgres
    networks:
      - input_network
      - output_network
    restart: unless-stopped

  # KAFKA SERVICES

  stock_zookeeper:
    image: bitnami/zookeeper:latest
    user: root
    container_name: stock_zookeeper
    expose:
      - 2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - input_network
      - output_network

  stock_kafka:
    image: bitnami/kafka:latest
    user: root
    container_name: stock_kafka
    expose:
      - 9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=stock_zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - stock_input_mongo
      - stock_input_postgres
      - stock_output_mongo
      - stock_output_postgres
      - stock_zookeeper
    networks:
      - input_network
      - output_network

  # SPARK SERVICES

  stock_spark_master:
    image: docker.io/bitnami/spark:2-debian-10
    container_name: stock_spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    expose:
      - 8080
      - 7077

  stock_spark_worker:
    image: docker.io/bitnami/spark:2-debian-10
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://stock_spark_master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - output_network

  spark_client:
    image: docker.io/bitnami/spark:2-debian-10
    entrypoint:
      - sleep
      - infinity
    networks:
      - output_network

  # PYTHON SERVICES

  stock_python_analysis:
    image: stock_python_analysis
    build:
      context: ./python
      dockerfile: ./dockerfiles/analyzer.Dockerfile
    container_name: stock_python_analysis
    networks:
      - output_network

  stock_input_generator:
    image: stock_input_generator
    build:
      context: ./python
      dockerfile: ./dockerfiles/generator.Dockerfile
    container_name: stock_input_generator
    networks:
      - input_network

networks:
  input_network:
    name: "Input Network"
  output_network:
    name: "Output Network"

volumes:
  mongo_input_volume:
  mongo_output_volume:
  postgres_stock_input:
  postgres_stock_output:
